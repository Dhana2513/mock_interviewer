name: "Build"

on:
  pull_request:
    branches:
      - dev
      - test
  push:
    branches:
      - main
      - develop

jobs:
  build:
    name: Build & Release test 3
    runs-on: macos-latest
    if: contains(github.event.head_commit.message, 'build:')

    steps:
      # 0. Checkout Repository (Required for Git to work)
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 1. Install Git (if necessary)
      - name: Install Git
        run: |
          git --version || brew install git

      # 2. Configure Git
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # 0. Check Commit Message for 'build:'
      - name: Check Commit Message
        run: |
          if [[ ! $(git log -1 --pretty=%B) =~ build: ]]; then
            echo "Commit message does not contain 'build:'. Skipping build."
            exit 0
          fi

      #1 Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

        #2 Setup Java
      - name: Set Up Java
        uses: actions/setup-java@v3.12.0
        with:
          distribution: 'oracle'
          java-version: '17'

        #3 Setup Flutter
      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'

        #4 Install Dependencies
      - name: Install Dependencies
        run: flutter pub get

      #6 Building APK
      - name: Build APK
        run: flutter build apk --release

        #9 Upload Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Releases
          path: build/app/outputs/flutter-apk/app-release.apk
        #           build/app/outputs/bundle/release/app-release.aab
        #           build/ios_build.tar.gz

        #10 Extract Version
      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV

        #11 Check if Tag Exists
      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

        #12 Modify Tag if it Exists
      - name: Modify Tag
        if: env.TAG_EXISTS == 'true'
        id: modify_tag
        run: |
          new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
          echo "VERSION=$new_version" >> $GITHUB_ENV
